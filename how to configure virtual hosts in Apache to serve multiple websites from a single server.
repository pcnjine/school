Configuring virtual hosts in Apache to serve multiple websites from a single server involves creating separate configurations for each site. This allows the server to distinguish between different domains and direct traffic to the correct site files.
Here's a step-by-step guide to setting up virtual hosts:
1. Prepare the Directory Structure
Assume you have two websites, example1.com and example2.com. First, create a directory for each site:
sudo mkdir -p /var/www/example1.com/public_html
sudo mkdir -p /var/www/example2.com/public_html
Set the appropriate permissions:
sudo chown -R $USER:$USER /var/www/example1.com/public_html
sudo chown -R $USER:$USER /var/www/example2.com/public_html

sudo chmod -R 755 /var/www
2. Create Sample Index Pages
Create a simple index page for each site:
echo "<html><head><title>Welcome to example1.com!</title></head><body><h1>Success! The example1.com virtual host is working!</h1></body></html>" | sudo tee /var/www/example1.com/public_html/index.html

echo "<html><head><title>Welcome to example2.com!</title></head><body><h1>Success! The example2.com virtual host is working!</h1></body></html>" | sudo tee /var/www/example2.com/public_html/index.html
3. Create Virtual Host Configuration Files
Create a configuration file for each virtual host in /etc/apache2/sites-available:
For example1.com
sudo nano /etc/apache2/sites-available/example1.com.conf
Add the following content:
<VirtualHost *:80>
    ServerAdmin webmaster@example1.com
    ServerName example1.com
    ServerAlias www.example1.com
    DocumentRoot /var/www/example1.com/public_html
    ErrorLog ${APACHE_LOG_DIR}/example1.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.com_access.log combined
</VirtualHost>
For example2.com
sudo nano /etc/apache2/sites-available/example2.com.conf
Add the following content:
<VirtualHost *:80>
    ServerAdmin webmaster@example2.com
    ServerName example2.com
    ServerAlias www.example2.com
    DocumentRoot /var/www/example2.com/public_html
    ErrorLog ${APACHE_LOG_DIR}/example2.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example2.com_access.log combined
</VirtualHost>
4. Enable the Virtual Host Files
Enable the virtual host configurations with the a2ensite command:
sudo a2ensite example1.com.conf
sudo a2ensite example2.com.conf
5. Disable the Default Virtual Host (Optional)
If you don't need the default virtual host, you can disable it:
sudo a2dissite 000-default.conf
6. Test the Configuration and Restart Apache
Test your configuration for syntax errors:
sudo apache2ctl configtest
If the syntax is OK, restart Apache to apply the changes:
sudo systemctl restart apache2
7. Update Your Hosts File (For Testing Locally)
To test locally, you can update your /etc/hosts file to map the domain names to your local server IP:
sudo nano /etc/hosts
Add the following lines:
plaintext
Copy code
127.0.0.1   example1.com
127.0.0.1   www.example1.com
127.0.0.1   example2.com
127.0.0.1   www.example2.com
8. Test Your Virtual Hosts
Open your web browser and navigate to http://example1.com and http://example2.com. You should see the respective index pages for each site.
By following these steps, you have configured Apache to serve multiple websites from a single server using virtual hosts.
